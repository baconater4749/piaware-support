#!/usr/bin/env tclsh

#
# generate network configuration
#

package require fa_config_generator
package require fa_sysinfo

proc configure_wireless {config} {
	if {![valid_network_config $config wireless]} {
		return
	}

	if {![$config exists wireless-ssid]} {
		::fa_config_generator::logger "wireless-network was set, but no wireless-ssid was given, no wireless network has been configured"
		return
	}

	# pick the right interface
	set wlan [::fa_sysinfo::wireless_interface]
	if {$wlan eq ""} {
		::fa_config_generator::logger "wireless-network was set, but no suitable wireless interface was found, no wireless network has been configured"
		return
	}

	# the physical interface config fragment
	# (this interface is brought up on boot and stays up
	# even while there is no AP association; wpa_supplicant
	# is started when the interface is brought up)
	set interfaces [list]
	lappend interfaces "auto $wlan"
	lappend interfaces "allow-hotplug $wlan"
	lappend interfaces "iface $wlan inet manual"
	lappend interfaces "wireless-power off"
	lappend interfaces "wpa-roam /etc/wpa_supplicant/wpa-roam.conf"

	::fa_config_generator::generate_file_part "/etc/network/interfaces" $interfaces

	# the wpasupplicant config file
	# this configures the actual association details
	# and contains the PSK/passphrase in plaintext
	# so we lock down the permissions
	set supplicant [list]
	lappend supplicant "network={"
	lappend supplicant "  ssid=\"[$config get wireless-ssid]\""
	lappend supplicant "  id_str=\"wireless\""
	lappend supplicant "  scan_ssid=1"
	if {[$config exists wireless-password]} {
		lappend supplicant "  key_mgmt=WPA-PSK"
		lappend supplicant "  psk=\"[$config get wireless-password]\""
	} else {
		lappend supplicant "  key_mgmt=NONE"
	}
	lappend supplicant "}"
	::fa_config_generator::generate_file "/etc/wpa_supplicant/wpa-roam.conf" $supplicant 0600

	# the logical interface config fragment
	# this interface is brought up or down when wpa_supplicant notices
	# that the wireless is associated/disconnected; DHCP etc triggers
	# at that point. it is named matching the "id_str" parameter above
	add_network_interface $config wireless wireless
}

proc configure_wired {config} {
	if {![valid_network_config $config wired]} {
		return
	}

	# the physical interface config fragment
	add_network_interface $config wired eth0

	# override the ifplugd config
	::fa_config_generator::generate_file "/etc/default/ifplugd" {
		{INTERFACES="eth0"}
		{HOTPLUG_INTERFACES=""}
		{ARGS="-q -f -u10 -d0 -w -I"}
		{SUSPEND_ACTION="stop"}
	}
}

proc valid_network_config {config net} {
	if {![$config get ${net}-network]} {
		return 0
	}

	set type [$config get ${net}-type]
	switch -nocase $type {
		dhcp {
			return 1
		}

		static {
			if {![$config exists ${net}-address]} {
				::fa_config_generator::logger "Missing ${net}-address setting, not configuring the ${net} network"
				return 0
			}
			return 1
		}

		default {
			::fa_config_generator::logger "${net}-type is set to '$type', which I don't understand (it should be dhcp or static)"
			return 0
		}
	}
}

proc add_network_interface {config net iface} {
	set out {}

	incr ::metric

	set type [$config get ${net}-type]
	switch -nocase $type {
		dhcp {
			# This is a bit unfortunate;
			# we want to pass -x (stop without releasing lease)
			# not -r (stop and release lease) when stopping dhclient,
			# as releasing the lease interacts badly with some wifi
			# routers, but ifupdown provides no way to change that
			# so we have to put the interface in manual mode and
			# provide up/down commands

			if {$net eq "wireless"} {
				lappend out "# DHCP, but ifupdown's dhcp mode does not do quite what we want"
				lappend out "iface $iface inet manual"
				lappend out "  up dhclient -v -pf /run/dhclient.\${IFACE}.pid -lf /var/lib/dhcp/dhclient.\${IFACE}.leases \${IFACE} -e IFACE_METRIC=$::metric"
				lappend out "  down dhclient -v -x -pf /run/dhclient.\${IFACE}.pid -lf /var/lib/dhcp/dhclient.\${IFACE}.leases \${IFACE}"
				lappend out "  down ip link set dev \${IFACE} down"
			} else {
				lappend out "iface $iface inet dhcp"
				lappend out "  metric $::metric"
			}
		}

		static {
			lappend out "iface $iface inet static"
			lappend out "  address [$config get ${net}-address]"
			if {[$config exists ${net}-netmask]} {
				lappend out "  netmask [$config get ${net}-netmask]"
			}
			if {[$config exists ${net}-broadcast]} {
				lappend out "  broadcast [$config get ${net}-broadcast]"
			}
			if {[$config exists ${net}-gateway]} {
				lappend out "  gateway [$config get ${net}-gateway]"
			}
			if {[$config exists ${net}-nameservers]} {
				lappend out "  dns-nameservers [$config get ${net}-nameservers]"
			}
			lappend out "  metric $::metric"
		}

		default {
			error "add_network_interface called with an invalid config (type $type)"
		}
	}

	::fa_config_generator::generate_file_part "/etc/network/interfaces" $out
}

proc configure_http_proxy {config} {
	if {[$config exists http-proxy-host] && [$config exists http-proxy-port]} {
		set proxyUrl "http://"
		if {[$config exists http-proxy-user] || [$config exists http-proxy-password]} {
			if {[$config exists http-proxy-user]} {
				append proxyUrl [$config get http-proxy-user]
			}

			if {[$config exists http-proxy-password]} {
				append proxyUrl ":" [$config get http-proxy-password]
			}

			append proxyUrl "@"
		}

		append proxyUrl [$config get http-proxy-host] ":" [$config get http-proxy-port] "/"
	} else {
		set proxyUrl ""
	}

	if {$proxyUrl ne ""} {
		lappend contents "Acquire::http::Proxy \"$proxyUrl\";"
		lappend contents "Acquire::https::Proxy \"$proxyUrl\";"
	} else {
		lappend contents "// No HTTP/HTTPS proxy configured"
	}

	::fa_config_generator::generate_file "/etc/apt/apt.conf.d/50http-proxy" $contents 0644 "//"
}

proc generate_network_config {config} {
	# /etc/network/interfaces header
	::fa_config_generator::generate_file "/etc/network/interfaces" {
		{auto lo}
		{iface lo inet loopback}
	}

	# default ifplugd config, unless overridden
	::fa_config_generator::generate_file "/etc/default/ifplugd" {
		{INTERFACES=""}
		{HOTPLUG_INTERFACES=""}
		{ARGS="-q -f -u10 -d0 -w -I"}
		{SUSPEND_ACTION="stop"}
	}

	configure_wired $config
	configure_wireless $config
	configure_http_proxy $config

	return 1
}

if {!$tcl_interactive} {
	::fa_config_generator::generate_from_argv generate_network_config $argv 
}
